<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Poole</title>
 <link href="/atom.xml" rel="self"/>
 <link href="http://localhost:4000//"/>
 <updated>2021-10-12T20:46:12+02:00</updated>
 <id>http://localhost:4000</id>
 <author>
   <name>Marco Biemann</name>
   <email>marcob@dtu.dk</email>
 </author>

 
 <entry>
   <title>Additional Plots</title>
   <link href="http://localhost:4000//2021/10/11/rlem2021-plots/"/>
   <updated>2021-10-11T00:00:00+02:00</updated>
   <id>http://localhost:4000/2021/10/11/rlem2021-plots</id>
   <content type="html">&lt;p&gt;Kiwifruit (often abbreviated as kiwi), or Chinese gooseberry is the edible
berry of several species of woody vines in the genus Actinidia.&lt;/p&gt;

&lt;p&gt;The most common cultivar group of kiwifruit is oval, about the size of a large
hen’s egg (5–8 cm (2.0–3.1 in) in length and 4.5–5.5 cm (1.8–2.2 in) in
diameter). It has a fibrous, dull greenish-brown skin and bright green or
golden flesh with rows of tiny, black, edible seeds. The fruit has a soft
texture, with a sweet and unique flavor.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Implementation details and architectures</title>
   <link href="http://localhost:4000//rlem2021/hyper"/>
   <updated>2021-10-08T00:00:00+02:00</updated>
   <id>http://localhost:4000/rlem2021/rlem2021-hyper</id>
   <content type="html">&lt;p&gt;Due to the importance of hyperparameters in RL experiments, we aim to provide more details here. Due to the limited page requirements, it was not realistically possible to include it in the original paper. As a disclamer, the architectures between the algorithms differ largely in size, therefore this paper is not meant to be a benchmark study between the algorithms, but more to show that using methods for POMDPs can be valuable for some applications in energy management.&lt;/p&gt;

&lt;p&gt;For all experiments, we used a discount factor of \(\gamma=0.99\).&lt;/p&gt;

&lt;h2 id=&quot;proximal-policy-optimisation-ppo&quot;&gt;Proximal Policy Optimisation (PPO)&lt;/h2&gt;

&lt;p&gt;Recall that &lt;a href=&quot;https://arxiv.org/abs/1707.06347&quot;&gt;PPO&lt;/a&gt; is an actor-critic algorithm. We are interested in finding the policy \(\pi_{\theta}(a\mid o)\) (or more generally \(\pi_{\theta}(a\mid h)\)). To do this, it is however necessary to predict the rewards in order to update the policy. Therefore, we  also need to train a critic \(V_w(s)\).&lt;/p&gt;

&lt;p&gt;The critic learns the value function \(V_w(s)\) that minimises the multistep Bellman error:&lt;/p&gt;

\[\frac{1}{2}\mathbb{E}_{\tau \sim p_{\pi}}[(V_w(s_t)-y(s_t,a_t))^2\]

&lt;p&gt;with&lt;/p&gt;

\[y\left(s_{t}, a_{t}\right)=\sum_{l=0}^{T-t-1} \gamma^{l} r\left(s_{t+l}, a_{t+l}\right)+\gamma^{T-t} V_{w_{\mathrm{old}}}\left(s_{T}\right).\]

&lt;p&gt;This allows to compute estimates of the advantage function using Generalised Advantage Estimation (&lt;a href=&quot;https://arxiv.org/abs/1506.02438&quot;&gt;GAE&lt;/a&gt;):&lt;/p&gt;

\[\hat{A}\left(s_{t}, a_{t}\right)=\sum_{l=0}^{T-t-1}(\lambda \gamma)^{l}\left(r(s_{t+l},a_{t+l})+\gamma V_w(s_{t+l+1})-V_w(s_{t+l})\right).\]

&lt;p&gt;These estimates are used to update the policy. The policy minimises the following loss:&lt;/p&gt;

\[L_{\pi}(\theta)=\mathbb{E}_{s \sim \rho^{\pi_{\theta_{\text {old }}}}, a \sim \pi_{\theta_{\text {old }}}}\left[\min \left(\frac{\pi_{\theta}(a \mid s)}{\pi_{\theta_{\text {old }}}(a \mid s)} \hat{A}(s, a), g(\varepsilon, \hat{A}(s, a))\right)\right],\]

&lt;p&gt;where&lt;/p&gt;

\[g(\varepsilon, A)=\left\{\begin{array}{ll}
(1+\varepsilon) A &amp;amp; \text { if } A \geq 0, \\
(1-\varepsilon) A &amp;amp; \text { if } A&amp;lt;0.
\end{array}\right.\]

&lt;h3 id=&quot;ppo-with-feed-forward-networks&quot;&gt;PPO with feed-forward networks&lt;/h3&gt;

&lt;p&gt;For PPO with a feed-forward network, we used the implementation from &lt;a href=&quot;https://github.com/DLR-RM/stable-baselines3&quot;&gt;StableBaselines3&lt;/a&gt;. We kept the same hyperparameters and used the same parameters than for our &lt;a href=&quot;https://www.sciencedirect.com/science/article/pii/S0306261921005961&quot;&gt;prior work&lt;/a&gt;. We report the parameters in the following table:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Critic network&lt;/td&gt;
      &lt;td&gt;\(5\rightarrow 64 \rightarrow 64 \rightarrow 1\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Actor network&lt;/td&gt;
      &lt;td&gt;\(5 \rightarrow 64 \rightarrow 64 \rightarrow (2\times 4)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Activation function&lt;/td&gt;
      &lt;td&gt;Tanh&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Optimiser&lt;/td&gt;
      &lt;td&gt;Adam&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Learning Rate&lt;/td&gt;
      &lt;td&gt;\(3 \cdot 10^{-4}\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Batch Size&lt;/td&gt;
      &lt;td&gt;64&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Trace-decay parameter (\(\lambda\))&lt;/td&gt;
      &lt;td&gt;0.95&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Horizon (T)&lt;/td&gt;
      &lt;td&gt;2048&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Number of Epochs&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Clipping Range (\(\varepsilon\))&lt;/td&gt;
      &lt;td&gt;0.2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Global Gradient Clipping&lt;/td&gt;
      &lt;td&gt;0.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Entropy regularisation&lt;/td&gt;
      &lt;td&gt;None&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Target KL early stopping&lt;/td&gt;
      &lt;td&gt;None&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;For more information about what these parameters do, we refer to the &lt;a href=&quot;https://stable-baselines3.readthedocs.io/en/master/modules/ppo.html&quot;&gt;documentation&lt;/a&gt;. We believe that the results of PPO on this case study can be significantly improved if we take into account the recent &lt;a href=&quot;https://arxiv.org/abs/2006.05990&quot;&gt;large-scale hyperparameter studies&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;ppo-with-lstm&quot;&gt;PPO with LSTM&lt;/h3&gt;

&lt;p&gt;For an architecture with LSTM, as discussed in the paper, it is more complicated and the two networks are merged into one: 
  &lt;img src=&quot;/assets/images/lstmppo-1.png&quot; alt=&quot;lstm&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As StableBaselines3 does not contain yet an implementation of recurrent policies, we used the implementation of &lt;a href=&quot;https://github.com/hill-a/stable-baselines&quot;&gt;StableBaselines&lt;/a&gt; instead (in Tensorflow instead of Pytorch). We report the parameters in the following table:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Neurons of Feed-forward layers (before LSTM cell)&lt;/td&gt;
      &lt;td&gt;64&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Neurons of LSTM layers&lt;/td&gt;
      &lt;td&gt;256&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Optimiser&lt;/td&gt;
      &lt;td&gt;Adam&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Learning Rate&lt;/td&gt;
      &lt;td&gt;\(3 \cdot 10^{-4}\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Trace-decay parameter (\(\lambda\))&lt;/td&gt;
      &lt;td&gt;0.95&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Horizon (T)&lt;/td&gt;
      &lt;td&gt;256&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Number of Epochs&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Clipping range (\(\varepsilon\))&lt;/td&gt;
      &lt;td&gt;0.2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Global Gradient Clipping&lt;/td&gt;
      &lt;td&gt;0.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Layer normalisation&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Entropy regularisation&lt;/td&gt;
      &lt;td&gt;None&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Target KL early stopping&lt;/td&gt;
      &lt;td&gt;None&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;We use a lower horizon to avoid backprogating too far through time. We also use less epochs for updating the networks before collecting new data for better computational efficiency. Note that the choice of architecture can be customised in several different ways. We can also use feed-forward layers after the LSTM cell, use GRU instead of LSTM etc. Other libraries, such as &lt;a href=&quot;https://github.com/ray-project/ray&quot;&gt;RLLib&lt;/a&gt;, use different architectures.&lt;/p&gt;

&lt;h2 id=&quot;soft-actor-critic-sac&quot;&gt;Soft Actor Critic (SAC)&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://arxiv.org/abs/1812.05905&quot;&gt;SAC&lt;/a&gt; has shown tremendous success in recent years and became the most popular off-policy RL algorithm for continuous control. The major difference compared to other algorithms comes from the fact that it optimises the maximum entropy RL objective (with \(\alpha &amp;gt; 0\)) :&lt;/p&gt;

\[J^{\text{soft}}({\pi}) =\mathbb{E}_{\tau \sim p_{\pi}}\left[\sum_{t\geq 0}\gamma^t \left(r(s_t, a_t)-\alpha\log\pi(a_t\mid s_t)\right)\right].\]

&lt;p&gt;Similarily to many off-policy methods, the critic \(Q_w(s,a)\) is trained to minimise the Bellman error:&lt;/p&gt;

\[L(w)=\frac{1}{2}\mathbb{E}_{(s,a,s')\sim \mathcal{U}(D)}\left[\left(y(s,a,s')- Q_w(s,a)\right)^2\right],\]

&lt;p&gt;where&lt;/p&gt;

\[y\left(s, a, s^{\prime}\right)=r(s, a)+\gamma\left(\min _{j=1,2} Q_{\bar{w}_{j}}\left(s^{\prime}, a^{\prime}\right)-\alpha \log \pi_{\theta}\left(a^{\prime} \mid s^{\prime}\right)\right),\]

&lt;p&gt;where \(a'\sim \pi_{\theta}(\cdot\mid s').\) We use two target networks to reduce the overestimation bias (as in double Q-learning or TD3).&lt;/p&gt;

&lt;p&gt;The policy optimises the following objective in order to satisfy a policy improvement step:&lt;/p&gt;

\[L_{\pi}(\theta)=\mathbb{E}_{s \sim \mathcal{U}(D), a \sim \pi_{\theta}}\left[\alpha \log \pi_{\theta}(a \mid s)-Q_{w}(s, a)\right].\]

&lt;p&gt;The gradient of this loss strongly resembles the DDPG update (but with additional temperature parameter). It is common to tune the temperature as well, as the performance is sensitive to this hyperparameter and we may want to decrease its value over time (similar to the exploration parameter \(\varepsilon\) when using \(\varepsilon\)-greedy exploration for Q-learning).&lt;/p&gt;

&lt;h3 id=&quot;sac-with-feed-forward-networks&quot;&gt;SAC with feed-forward networks&lt;/h3&gt;

&lt;p&gt;The following architecture is standard. We used the implementation of &lt;a href=&quot;https://github.com/DLR-RM/stable-baselines3&quot;&gt;StableBaselines3&lt;/a&gt;. The output of the actor is \((\mu_{\theta}(s), \sigma_{\theta}(s))\); the action is then sampled from a diagonal multivariate Gaussian distribtion.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Number of critics&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Critic networks&lt;/td&gt;
      &lt;td&gt;\(9\rightarrow 256 \rightarrow 256\rightarrow 1\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Actor network&lt;/td&gt;
      &lt;td&gt;\(5 \rightarrow 256\rightarrow 256 \rightarrow (2\times 4)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Activation function&lt;/td&gt;
      &lt;td&gt;Relu&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Optimiser&lt;/td&gt;
      &lt;td&gt;Adam&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Learning rate&lt;/td&gt;
      &lt;td&gt;\(3 \cdot 10^{-4}\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Batch size&lt;/td&gt;
      &lt;td&gt;256&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Polyak averaging (\(\tau\))&lt;/td&gt;
      &lt;td&gt;\(5 \cdot 10^{-3}\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Temperature (\(\alpha\))&lt;/td&gt;
      &lt;td&gt;Automatically adjusted&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;sac-with-lstm&quot;&gt;SAC with LSTM&lt;/h3&gt;

&lt;p&gt;SAC with LSTM is not really standard in the literature. We found only little implementations, among them &lt;a href=&quot;https://github.com/quantumiracle/Popular-RL-Algorithms&quot;&gt;PopularRL algorithms&lt;/a&gt;, &lt;a href=&quot;https://github.com/google-research/seed_rl&quot;&gt;SeedRL&lt;/a&gt; and the implementation by &lt;a href=&quot;https://github.com/oist-cnru/Variational-Recurrent-Models&quot;&gt;Han et. al&lt;/a&gt;. We used the first one, as it was a clean implementation. All implementations use the architecture of &lt;a href=&quot;https://arxiv.org/abs/1710.06537&quot;&gt;Peng et. al&lt;/a&gt;.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Number of critics&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Neurons of feed-forward layers of critics&lt;/td&gt;
      &lt;td&gt;256&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Neurons of LSTM cell of critics&lt;/td&gt;
      &lt;td&gt;256&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Neurons of feed-forward layers of actor&lt;/td&gt;
      &lt;td&gt;128&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Neurons of LSTM cell of actor&lt;/td&gt;
      &lt;td&gt;256&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Sequence length&lt;/td&gt;
      &lt;td&gt;20&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Batch size&lt;/td&gt;
      &lt;td&gt;16&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Activation function (outside of LSTM)&lt;/td&gt;
      &lt;td&gt;Relu&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Optimiser&lt;/td&gt;
      &lt;td&gt;Adam&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Learning rate&lt;/td&gt;
      &lt;td&gt;\(3 \cdot 10^{-4}\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Polyak averaging (\(\tau\))&lt;/td&gt;
      &lt;td&gt;\(10^{-2}\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Temperature (\(\alpha\))&lt;/td&gt;
      &lt;td&gt;Automatically adjusted&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The policy network contains two branches:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;one recurrent branch has \((a_{t-1}, o_t)\) as input, goes through one linear layer, before entering an LSTM cell.&lt;/li&gt;
  &lt;li&gt;the second feed-forward branch has \(o_t\) as input and goes through one linear layer.&lt;/li&gt;
  &lt;li&gt;the output of both branches are concatenated and go through two other linear layers and has \((\mu_{\theta}(s), \sigma_{\theta}(s))\) as output.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The critics also contain two branches:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;one recurrent branch has \((a_{t-1}, o_t)\) as input, goes through one linear layer, before entering an LSTM cell.&lt;/li&gt;
  &lt;li&gt;the second feed-forward branch has \((a_t, o_t)\) as input and goes through one linear layer.&lt;/li&gt;
  &lt;li&gt;the output of both branches are concatenated and go through two other linear layers and has its Q-value as output.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The motivation of using two branches is that the recurrent branch is supposed to infer the dynamics of the environment, making the approach arguably model-based. As the current observation \(o_t\) is of fundamental importance, it is preprocessed by another branch to make sure that this information is still available after going through the LSTM cell.&lt;/p&gt;

&lt;h2 id=&quot;stochastic-latent-actor-critic-slac&quot;&gt;Stochastic Latent Actor Critic (SLAC)&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://arxiv.org/abs/1907.00953&quot;&gt;SLAC&lt;/a&gt; is a generalisation of SAC to POMDPs. The derivation of the objective follows the same idea as SAC. It uses the &lt;a href=&quot;https://arxiv.org/abs/1805.00909&quot;&gt;control as inference&lt;/a&gt; framework, which interprets control as a probabilistic inference problem. This can be used to derive the maximum entropy RL objective that is used by SAC. If we apply the same ideas to a POMDP, instead of an MDP, we arrive at the objective of SLAC.&lt;/p&gt;

&lt;p&gt;The actor and critic losses are therefore identical to SAC; the only difference comes from the fact that we also need to approximate the belief. We have, therefore, this loss as well:&lt;/p&gt;

\[\begin{align}
J_M(\varphi, \psi) &amp;amp;= \mathbb{E}_{s_{1:\tau + 1}\sim q_{\varphi}}\Big[\sum_{t=0}^{\tau}\Big(-\log e_{\psi}(o_{t+1}\mid s_{t+1}) \\ &amp;amp;+ \mathcal{D}_{KL}(q_{\varphi}(s_{t+1}\mid o_{t+1}, s_t, a_t)\Vert p_{\psi}(s_{t+1}\mid s_t, a_t))\Big)\Big]. 
\end{align}\]

&lt;p&gt;We separated the contribution to the encoder weights \(\varphi\) and the decoder weights \(\psi\). The intuiton behind this is that the networks have different roles:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The encoder \(q_{\varphi}\) aims to approximate the belief, that is it aims to learn a latent representation of the state. This state can then used by the critic to estimate future rewards.&lt;/li&gt;
  &lt;li&gt;The observation decoder \(e_{\psi}\) aims to generate samples that resemble the ones given by the environment.&lt;/li&gt;
  &lt;li&gt;The transition decoder \(p_{\psi}\) aims to model the environment, so that the state is updated when an action is taken in a similar way than the “true” state of the environment.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Therefore the loss means that on one hand we want to maximise the likelihood of observations \((\hat{o}_1,\cdots, \hat{o}_{\tau + 1})\) genrated by the decoder. And on the other hand, we want to minimise the Kullback-Leibler divergence between the sequence of states \((s_1, \cdots, s_{\tau + 1})\) inferred by the encoder and the sequence of states \((\hat{s}_1, \cdots, \hat{s}_{\tau + 1})\) generated by the decoder.&lt;/p&gt;

&lt;p&gt;Traditional VAE do not evaluate sequences. SLAC uses a Bayesian network to address this issue, but related work also use recurrent VAE. A small (of length 8 in the paper) sequence of observations and actions are collected in the environment (using an older version of the policy). These sequences are then stored into a replay buffer. The networks are then updated the following way:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Sample a batch of observation-action sequences \((o_1, a_1, \cdots, o_{\tau + 1}, a_{\tau + 1})\) from the replay buffer.&lt;/li&gt;
  &lt;li&gt;The first observation \(o_1\) goes through the encoder \(q_{\varphi}(s_1\mid o_1)\). \(q_{\varphi}\) is a two-layer feed-forward network, that uses \(o_1\) as input.&lt;/li&gt;
  &lt;li&gt;The latent state \(s_1\) is used as input by the critic \(Q_w(s_1, a_1)\).&lt;/li&gt;
  &lt;li&gt;The latent state is used as input by \(e_{\psi}(o_1\mid s_1)\) to generate an observation \(\hat{o}_1\).&lt;/li&gt;
  &lt;li&gt;The latent state is also used as input by \(p_{\psi}(s_2\mid s_1, a_1)\) to generate a next state \(\hat{s}_2\). This is a network that takes \((s_1, a_1)\) as input.&lt;/li&gt;
  &lt;li&gt;The latent state \(s_1\) is then also used to calculate the next latent state \(s_2\). Here \(q_{\varphi}(s_2\mid s_1, a_1, o_2)\) is a neural network that takes \((s_1,a_1,o_2)\) as input and is different to the network, used in step 1.&lt;/li&gt;
  &lt;li&gt;We continue this way to generate the necessary sequences.&lt;/li&gt;
  &lt;li&gt;We can then calculate the desired losses and update the networks using gradient descent (or Adam in practice).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This implies that we have 7 neural networks to train: 2 critics, 1 actor, 2 decoders and 2 encoders (one for the first time-step using only the initial observation as input, the other using the current observation, along with the previous state and action as input). However, as we shall see, the original implementation is more complicated…&lt;/p&gt;

&lt;h3 id=&quot;the-actual-implementation-with-latent-variable-factorisation&quot;&gt;The actual implementation with latent variable factorisation…&lt;/h3&gt;

&lt;p&gt;Lee et. al use two-variable factorisation model, meaning that they write \(s_t=(z_t^1, z_t^2)\) and write&lt;/p&gt;

\[q_{\varphi}(s_1\mid o_1) = q_{\varphi}(z^2_1\mid z_1^1)q_{\varphi}(z_1^1\mid o_1)\]

&lt;p&gt;and&lt;/p&gt;

\[q_{\varphi}(s_t\mid o_t, a_{t-1}, s_{t-1})=\textcolor{blue}{q_{\varphi}(z^2_t\mid z^1_t,z^2_{t-1},a_{t-1})}q_{\varphi}(z^1_t\mid o_t, z^2_{t-1},a_{t-1}).\]

&lt;p&gt;We do a similar factorisation for the decoder:&lt;/p&gt;

\[p_{\psi}(s_t\mid s_{t-1}, a_{t-1})=\textcolor{blue}{p_{\psi}(z_t^2\mid z^1_t,z^2_{t-1},a_{t-1})}p_{\psi}(z^1_t\mid z^2_{t-1},a_{t-1}).\]

&lt;p&gt;The terms in blue have the same input, so a common simplification is to use the same network \(p_{\psi}(z_t^2\mid z^1_t,z^2_{t-1},a_{t-1})\) for both the encoder and decoder. This design simplifies the training process. This idea to combine VAE with autoregressive models is for instance discussed by &lt;a href=&quot;https://arxiv.org/abs/1902.02102&quot;&gt;Maaløe et. al.&lt;/a&gt; and has been used in image generation tasks, obtaining competitive performance to generative adversarial networks (GAN). Lee et. al. performed an ablation study and showed that this design significantly improves performance.&lt;/p&gt;

&lt;p&gt;Another important design choice is whether the policy \(\pi_{\theta}\) should use the latent state \(s_t\sim q_{\varphi}\) as input or be conditioned on the history \(h_t=(o_1,a_1,\cdots, o_t)\). There is some debate on what choice should be used. SLAC uses the history as input and argues that using the latent state as input leads to over-optimistic behaviour. Furthermore, during runtime, we can run the policy without requiring an inference model. However, &lt;a href=&quot;https://arxiv.org/abs/1912.10703&quot;&gt;Han et. al.&lt;/a&gt; argues that this choice makes it impossible for the agent to remember long-term dependencies, as the policy only takes into account the recent past. An ablation study is done in the SLAC paper and similar results are obtained. In our experiments, we used the history as imput. However, the critic \(Q_w(s_t,a_t)\) is conditioned on the state \(s_t\sim q_{\varphi}\) and obtains significantly worse results otherwise.&lt;/p&gt;

&lt;p&gt;Another network is used to model the reward function. However, we believe that for our application, this design choice is not essential, as we defined the reward function with the current observation only, so it is not difficult to infer. However, if the reward function is random or non-Markovian, this additional network may be beneficial. Therefore, using the notations of the two-variable factorisation, we have in addition the reward decoder:&lt;/p&gt;

\[\hat{r}_{t+1} \sim r_{\psi}(\cdot\mid z^1_t,z_t^2,a_t,z_{t+1}^1,z_{t+1}^2).\]

&lt;p&gt;Therefore, a sequence of rewards \((\hat{r}_1, \cdots, \hat{r}_{\tau})\) is also generated and another likelihood term for the rewards should be added to the loss function. This means that the state should not only include information to explain observations, but also the rewards.&lt;/p&gt;

&lt;p&gt;Summing up, the actual loss function for the VAE is the following:&lt;/p&gt;

\[\begin{align} 
J_M(\varphi, \psi) &amp;amp;= \mathbb{E}_{z^1_{1:\tau + 1}\sim q_{\varphi}, z^2_{1:\tau +1}\sim p_{\psi}}\Big[\sum_{t=0}^{\tau}\Big(-\log e_{\psi}(o_{t+1}\mid z^1_{t+1}, z_{t+1}^2) \\ &amp;amp;-\log r_{\psi}(r_{t+1}\mid z^1_{t},z_{t}^2,a_{t},z_{t+1}^1,z_{t+1}^2) \\ &amp;amp;+ \mathcal{D}_{KL}(q_{\varphi}(z^1_{t+1}\mid o_{t+1}, z^2_t, a_t)\Vert p_{\psi}(z^1_{t+1}\mid z^2_t, a_t))\Big)\Big].
\end{align}\]

&lt;h3 id=&quot;implementation-details&quot;&gt;Implementation details&lt;/h3&gt;

&lt;p&gt;An important additional change is necessary to adapt the architecture to the current case study. The SLAC paper has been implemented for image observations, so we need to adapt it to vector observations. This for example done by &lt;a href=&quot;https://arxiv.org/abs/1912.10703&quot;&gt;Han et. al.&lt;/a&gt; and we used the implementation available &lt;a href=&quot;https://github.com/oist-cnru/Variational-Recurrent-Models&quot;&gt;here&lt;/a&gt;. This implementation does the following design choices:&lt;/p&gt;

&lt;p&gt;It uses the original version of SAC, which trains two critics: one critic \(Q_w(s,a)\) and the critic \(V_{\omega}(s)\). The Bellman targets use \(V_{\bar{\omega}}(s)\), hence \(V_{\omega}(s)\) is a network aiming to stabilise the Bellman residuals. The more commonly used version of SAC uses a target Q-network, as it involves training a network less. The implementation however uses temperature tuning, as introduced by SACv2.&lt;/p&gt;

&lt;p&gt;They use two different networks to model \(\mu\) and \(\sigma\) respectively, each consisting of two layers without shared weights. This is different to the commonly used architectures in RL (e.g. in StableBaselines3), where the input goes through two linear layers and then goes to two separate heads (one for \(\mu\) and one for \(\sigma\)). In this paper, we used (by lazyness and because we already performed the experiments, before going through the code) the same design than Han et. al., but we believe that a modification here can significantly reduce computational time, without hurting performance.&lt;/p&gt;

&lt;p&gt;All neural networks are feed-forward networks and both \(\mu\) and \(\sigma\) are trainable parameters. In the original paper, they used a fixed  \(\sigma\) for \(e_{\psi}\) to generate images. Furthermore, the actor is conditioned on past observations \((o_1,\cdots,o_{t})\) instead of the history \((o_1,a_1,\cdots, a_{t-1},o_t).\) The input of the policy is the dimension of observation space * sequence length. To deal with missing data, we use zero padding.&lt;/p&gt;

&lt;p&gt;All the networks trained are summarised in the following table:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Sequence length&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Dimension of \(z^1\)&lt;/td&gt;
      &lt;td&gt;16&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Dimension of \(z^2\)&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Actor network \(\pi_{\theta}(a_t\mid o_1,\cdots,o_t)\)&lt;/td&gt;
      &lt;td&gt;\(2\times(5\cdot 8\rightarrow 256 \rightarrow 256 \rightarrow 4)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Value network \(V_{\omega}(z^2)\)&lt;/td&gt;
      &lt;td&gt;\(32 \rightarrow 256 \rightarrow 256 \rightarrow 1\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Q-networks \(Q_{w_i}(z^2,a)\)&lt;/td&gt;
      &lt;td&gt;\(2\times ((32+4)\rightarrow 256 \rightarrow 256 \rightarrow 1)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Transition decoder \(p_{\psi}(z^1_{t+1}\mid z^2_t, a_t)\)&lt;/td&gt;
      &lt;td&gt;\(2\times ((32 + 4)\rightarrow 128 \rightarrow 128 \rightarrow 16)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Common encoder/decoder \(p_{\psi}(z^2_{t+1}\mid z^1_{t+1},z^2_t,a_t)\)&lt;/td&gt;
      &lt;td&gt;\(2\times((32 + 16 + 4)\rightarrow 128 \rightarrow 128 \rightarrow 32)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Initial transition decoder \(p_{\psi}(z^2_1\mid z^1_1)\)&lt;/td&gt;
      &lt;td&gt;\(2\times(16 \rightarrow 128 \rightarrow 128\rightarrow 32)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Emission decoder \(e_{\psi}(o_t\mid z^1_t,z^2_t)\)&lt;/td&gt;
      &lt;td&gt;\(2\times ((32+16)\rightarrow 128\rightarrow 128\rightarrow 5)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Reward decoder \(r_{\psi}(r_{t+1}\mid z^1_t,z_t^2,a_t,z_{t+1}^1,z_{t+1}^2)\)&lt;/td&gt;
      &lt;td&gt;\(2\times((2\cdot(32+16)+4)\rightarrow 128\rightarrow 128\rightarrow 1)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Belief encoder \(q_{\varphi}(z^1_{t+1}\mid o_{t+1},z^2_t,a_t)\)&lt;/td&gt;
      &lt;td&gt;\(2\times((32+5+4)\rightarrow 128 \rightarrow 128 \rightarrow 16)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Initial belief encoder \(q_{\varphi}(z^1_1\mid o_1)\)&lt;/td&gt;
      &lt;td&gt;\(2\times (5\rightarrow 128 \rightarrow 128\rightarrow 16)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Batch size&lt;/td&gt;
      &lt;td&gt;64&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Activation functions of VAE&lt;/td&gt;
      &lt;td&gt;Tanh&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Activation function of actor/critics&lt;/td&gt;
      &lt;td&gt;Relu&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Optimiser&lt;/td&gt;
      &lt;td&gt;Adam&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Learning rate of VAE&lt;/td&gt;
      &lt;td&gt;\(10^{-4}\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Learning rate of actor/critcs&lt;/td&gt;
      &lt;td&gt;\(3\cdot 10^{-4}\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Polyak averaging&lt;/td&gt;
      &lt;td&gt;\(5\cdot 10^{-3}\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Temperature (\(\alpha\))&lt;/td&gt;
      &lt;td&gt;Automatically adjusted&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Model pretraining&lt;/td&gt;
      &lt;td&gt;5000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Data collection before training starts&lt;/td&gt;
      &lt;td&gt;1000&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The last two lines mean that we collect data during 1000 timesteps (around 10 days) before pretraining the model. This explains the large performance improvement of SLAC (and SAC-LSTM using a similar trick) at the beginning of the training. This trick can significantly improve data efficiency and may be of interest for other algorithms.&lt;/p&gt;

&lt;p&gt;We believe, as mentioned before, that the used architecture can be improved and made computationally cheaper in several ways:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Use one common architecture for \(\mu\) and \(\sigma\), reducing significantly the training time.&lt;/li&gt;
  &lt;li&gt;Not train the value network, as it is proved not necessary in SACv2.&lt;/li&gt;
  &lt;li&gt;Try conditioning the policy on the latent state, or also using previous actions as input (as used in the originals SLAC paper).&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;The different architectures vary in size by several order of magnitudes, so this is not meant to be a fair comparison between the algorithms. Obviously, SAC-LSTM and SLAC with the current architecture sizes require a GPU for sanity. The RAM requirements of SLAC are high. We found that smaller networks in SLAC (e.g. with around 64 neurons) do not reduce the performence improvements by much, while still enjoying impressive data efficiency. This makes it technically possible to train a model on a CPU, as the additonal gains in data efficiency compensate for the higher computational time.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Apples</title>
   <link href="http://localhost:4000//2018/08/21/apples/"/>
   <updated>2018-08-21T00:00:00+02:00</updated>
   <id>http://localhost:4000/2018/08/21/apples</id>
   <content type="html">&lt;p&gt;An apple is a sweet, edible fruit produced by an apple tree.&lt;/p&gt;

&lt;p&gt;Apple trees are cultivated worldwide, and are the most widely grown species in
the genus Malus. The tree originated in Central Asia, where its wild ancestor,
Malus sieversii, is still found today. Apples have been grown for thousands of
years in Asia and Europe, and were brought to North America by European
colonists.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Firstpost</title>
   <link href="http://localhost:4000//2018/08/20/firstpost/"/>
   <updated>2018-08-20T00:00:00+02:00</updated>
   <id>http://localhost:4000/2018/08/20/firstpost</id>
   <content type="html">&lt;p&gt;A banana is an edible fruit – botanically a berry – produced by several kinds
of large herbaceous flowering plants in the genus Musa.&lt;/p&gt;

&lt;p&gt;In some countries, bananas used for cooking may be called “plantains”,
distinguishing them from dessert bananas. The fruit is variable in size, color,
and firmness, but is usually elongated and curved, with soft flesh rich in
starch covered with a rind, which may be green, yellow, red, purple, or brown
when ripe.&lt;/p&gt;
</content>
 </entry>
 

</feed>
